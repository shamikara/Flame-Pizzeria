// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
 // previewFeatures = ["createManyAndReturn"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// --- ENUMS ---
// (No changes needed here, they are well-defined)

enum Role {
  ADMIN
  MANAGER
  STORE_KEEP
  CHEF
  WAITER
  DELIVERY_PERSON
  KITCHEN_HELPER
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_PICKUP
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
}

enum OrderType {
  DINE_IN
  DELIVERY
  TAKEAWAY
}

enum LeaveStatus {
  ACTIVE
  ON_LEAVE
}

enum MeasurementUnit {
  KG
  G
  L
  ML
  PIECE
}

enum AlertSeverity {
  LOW
  EXPIRING
  OUT
  CRITICAL
}

// --- MODELS ---

model User {
  id        String   @id @default(cuid()) // Changed to CUID
  firstName String
  lastName  String
  email     String   @unique
  password  String
  address   String?
  contact   String?
  role      Role     @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  employee       Employee? // A user can be an employee (1-to-1)
  orders         Order[]
  ratings        Rating[]
  recipes        Recipe[]
  recipeComments RecipeComment[]
}

model Employee {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @unique // Now a mandatory 1-to-1 link to a User
  salary      Float
  leaveStatus LeaveStatus @default(ACTIVE)
  joinedAt    DateTime    @default(now())
  isActive    Boolean     @default(true)

  // Relationships
  shifts          Shift[]
  preparedOrders  Order[]    @relation("OrderPreparedBy")
  deliveredOrders Order[]    @relation("OrderDeliveredBy")
  deliveries      Delivery[]
}

// NEW: A dedicated model for categories for consistency.
model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  foodItems FoodItem[]
}

model FoodItem {
  id          String   @id @default(cuid()) // Renamed from Product
  name        String
  description String?
  price       Float
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  category   Category    @relation(fields: [categoryId], references: [id])
  categoryId String // Link to the new Category model
  recipe     Recipe? // A food item might be based on one recipe
  orderItems OrderItem[]
  ratings    Rating[]
}

model Order {
  id              String      @id @default(cuid())
  total           Float
  status          OrderStatus @default(PENDING)
  type            OrderType // More structured than a string
  notes           String?
  tableNumber     String? // For DINE_IN
  deliveryAddress String? // For DELIVERY
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  // Relationships
  user          User      @relation(fields: [userId], references: [id])
  userId        String
  preparedBy    Employee? @relation(name: "OrderPreparedBy", fields: [preparedById], references: [id])
  preparedById  String?
  deliveredBy   Employee? @relation(name: "OrderDeliveredBy", fields: [deliveredById], references: [id])
  deliveredById String?

  items    OrderItem[]
  payments Payment[]
  delivery Delivery?

  // REMOVED: OrderRawMaterial relation. Inventory should be handled by application logic.
}

model OrderItem {
  id           String  @id @default(cuid())
  quantity     Int
  price        Float // Price at the time of order
  specialNotes String?

  // Relationships
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
}

model RawMaterial {
  id               String          @id @default(cuid())
  name             String          @unique // Added unique constraint
  quantity         Float           @default(0) // Renamed from quantityKg
  unit             MeasurementUnit
  expiryDate       DateTime?
  restockThreshold Float           @default(5)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  // Relationships
  supplier          Supplier?          @relation(fields: [supplierId], references: [id])
  supplierId        String?
  inventoryAlerts   InventoryAlert[]
  recipeIngredients RecipeIngredient[]
}

model Recipe {
  id          String   @id @default(cuid())
  name        String
  description String
  steps       String   @db.Text // Use Text for potentially long strings
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  foodItem    FoodItem           @relation(fields: [foodItemId], references: [id])
  foodItemId  String             @unique // A recipe produces one specific food item
  author      User               @relation(fields: [authorId], references: [id])
  authorId    String
  ingredients RecipeIngredient[]
  comments    RecipeComment[]
}

model RecipeIngredient {
  id       String          @id @default(cuid())
  quantity Float
  unit     MeasurementUnit

  // Relationships
  recipe        Recipe      @relation(fields: [recipeId], references: [id])
  recipeId      String
  rawMaterial   RawMaterial @relation(fields: [rawMaterialId], references: [id])
  rawMaterialId String
}

// --- OTHER MODELS (Mainly ID and type changes) ---

model InventoryAlert {
  id         String        @id @default(cuid())
  message    String
  severity   AlertSeverity
  resolved   Boolean       @default(false)
  resolvedAt DateTime?
  createdAt  DateTime      @default(now())

  // Relationships
  rawMaterial   RawMaterial @relation(fields: [rawMaterialId], references: [id])
  rawMaterialId String
}

model RecipeComment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())

  // Relationships
  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
}

model Rating {
  id        String   @id @default(cuid())
  stars     Int // Validate 1-5 in application code
  comment   String?  @db.Text
  createdAt DateTime @default(now())

  // Relationships
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
}

model Delivery {
  id        String    @id @default(cuid())
  startTime DateTime
  endTime   DateTime?
  status    String    @default("pending") // Consider an enum here too

  // Relationships
  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String   @unique
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String
}

model Shift {
  id           String   @id @default(cuid())
  start        DateTime
  end          DateTime
  breakMinutes Int      @default(30)

  // Relationships
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String
}

model Supplier {
  id        String   @id @default(cuid())
  name      String
  contact   String
  email     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  rawMaterials RawMaterial[]
}

model Payment {
  id            String   @id @default(cuid())
  amount        Float
  method        String // "CASH", "CARD", "ONLINE"
  status        String // "PENDING", "COMPLETED", "REFUNDED"
  transactionId String?
  createdAt     DateTime @default(now())

  // Relationships
  order   Order  @relation(fields: [orderId], references: [id])
  orderId String
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String // "CREATE", "UPDATE", "DELETE"
  entityType String // "FoodItem", "Order", etc.
  entityId   String
  userId     String?
  oldData    Json? // Use Json type for better handling
  newData    Json? // Use Json type
  createdAt  DateTime @default(now())
}
