generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ========================= ENUMS =========================

enum Role {
  ADMIN
  MANAGER
  STORE_KEEP
  CHEF
  WAITER
  DELIVERY_PERSON
  KITCHEN_HELPER
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_PICKUP
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
}

enum OrderType {
  DINE_IN
  DELIVERY
  TAKEAWAY
}

enum LeaveStatus {
  ACTIVE
  ON_LEAVE
}

enum MeasurementUnit {
  KG
  G
  L
  ML
  PIECE
}

enum AlertSeverity {
  LOW
  EXPIRING
  OUT
  CRITICAL
}

enum PaymentMethod {
  CASH
  CARD
  ONLINE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum RecipeStatus {
  PENDING
  APPROVED
  REJECTED
}

// ========================= MODELS =========================

model User {
  id               Int       @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String    @unique
  password         String
  address          String?
  contact          String?
  role             Role      @default(CUSTOMER)
  isActive         Boolean   @default(true)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  resetToken       String?
  resetTokenExpiry DateTime?

  employee         Employee?
  orders           Order[]
  ratings          Rating[]
  recipes          Recipe[]
  communityRecipes CommunityRecipe[]
  recipeComments   RecipeComment[]
  notifications    Notification[]
}

model Employee {
  id          Int         @id @default(autoincrement())
  user        User        @relation(fields: [userId], references: [id])
  userId      Int         @unique
  salary      Float
  leaveStatus LeaveStatus @default(ACTIVE)
  joinedAt    DateTime    @default(now())
  isActive    Boolean     @default(true)

  shifts          Shift[]
  preparedOrders  Order[]     @relation("OrderPreparedBy")
  deliveredOrders Order[]     @relation("OrderDeliveredBy")
  deliveries      Delivery[]
  leadership      Leadership?
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  foodItems FoodItem[]
}

model FoodItem {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  imageUrl    String?
  isActive    Boolean  @default(true)
  foodType    Int      @default(0) @db.TinyInt // 1=Veg, 2=Egg, 4=Dairy, 8=Meat, 16=Seafood
  nutrition   Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category       Category        @relation(fields: [categoryId], references: [id])
  categoryId     Int
  recipe         Recipe?
  orderItems     OrderItem[]
  ratings        Rating[]
  customizations Customization[]
}

model Customization {
  id          Int                       @id @default(autoincrement())
  name        String
  price       Float
  foodItem    FoodItem                  @relation(fields: [foodItemId], references: [id])
  foodItemId  Int
  ingredients CustomizationIngredient[]
}

model CustomizationIngredient {
  id              Int             @id @default(autoincrement())
  customization   Customization   @relation(fields: [customizationId], references: [id])
  customizationId Int
  ingredient      Ingredient      @relation(fields: [ingredientId], references: [id])
  ingredientId    Int
  quantity        Float
  unit            MeasurementUnit
}

model Order {
  id              Int         @id @default(autoincrement())
  total           Float
  status          OrderStatus @default(PENDING)
  type            OrderType
  notes           String?
  address         String
  phone           String
  tableNumber     String?
  deliveryAddress String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user          User           @relation(fields: [userId], references: [id])
  userId        Int
  preparedBy    Employee?      @relation(name: "OrderPreparedBy", fields: [preparedById], references: [id])
  preparedById  Int?
  deliveredBy   Employee?      @relation(name: "OrderDeliveredBy", fields: [deliveredById], references: [id])
  deliveredById Int?
  notifications Notification[]
  items         OrderItem[]
  payments      Payment[]
  delivery      Delivery?
}

model OrderItem {
  id             Int     @id @default(autoincrement())
  quantity       Int
  price          Float
  specialNotes   String?
  customizations Json?

  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId Int
}

model Payment {
  id            Int           @id @default(autoincrement())
  amount        Float
  method        PaymentMethod
  status        PaymentStatus
  transactionId String?
  createdAt     DateTime      @default(now())

  order   Order @relation(fields: [orderId], references: [id])
  orderId Int
}

model Delivery {
  id        Int       @id @default(autoincrement())
  startTime DateTime
  endTime   DateTime?
  status    String    @default("pending")

  order      Order    @relation(fields: [orderId], references: [id])
  orderId    Int      @unique
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId Int
}

model Ingredient {
  id               Int             @id @default(autoincrement())
  name             String          @unique
  stock            Float           @default(0)
  unit             MeasurementUnit
  expiryDate       DateTime?
  restockThreshold Float           @default(5)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  supplier                 Supplier?                 @relation(fields: [supplierId], references: [id])
  supplierId               Int?
  inventoryAlerts          InventoryAlert[]
  recipeIngredients        RecipeIngredient[]
  customizationIngredients CustomizationIngredient[]
}

model Supplier {
  id        Int      @id @default(autoincrement())
  name      String
  contact   String
  email     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ingredients Ingredient[]
}

model Recipe {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  steps       String   @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  foodItem    FoodItem           @relation(fields: [foodItemId], references: [id])
  foodItemId  Int                @unique
  author      User               @relation(fields: [authorId], references: [id])
  authorId    Int
  ingredients RecipeIngredient[]
  comments    RecipeComment[]
}

model RecipeIngredient {
  id           Int             @id @default(autoincrement())
  quantity     Float
  unit         MeasurementUnit
  recipe       Recipe          @relation(fields: [recipeId], references: [id])
  recipeId     Int
  ingredient   Ingredient      @relation(fields: [ingredientId], references: [id])
  ingredientId Int
}

model RecipeComment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId Int
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId Int
}

model CommunityRecipe {
  id          String       @id @default(cuid())
  name        String
  description String       @db.Text
  imageUrl    String?
  status      RecipeStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  @@index([status])
  @@index([authorId])
}

model Rating {
  id        Int      @id @default(autoincrement())
  stars     Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId Int
}

model InventoryAlert {
  id         Int           @id @default(autoincrement())
  message    String
  severity   AlertSeverity
  resolved   Boolean       @default(false)
  resolvedAt DateTime?
  createdAt  DateTime      @default(now())

  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId Int
}

model NewsletterSubscription {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
}

model AuditLog {
  id         Int      @id @default(autoincrement())
  action     String
  entityType String
  entityId   Int
  userId     Int?
  oldData    Json?
  newData    Json?
  createdAt  DateTime @default(now())
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String   @db.Text
  type      String   @default("ORDER_READY")
  read      Boolean  @default(false)
  orderId   Int?
  userId    Int
  createdAt DateTime @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([createdAt])
}

model Shift {
  id         Int      @id @default(autoincrement())
  name       String
  startTime  String
  endTime    String
  date       DateTime
  employeeId Int
  status     String   @default("SCHEDULED")
  notes      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  employee Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  @@index([date, employeeId])
  @@index([status])
}

model Leadership {
  id         Int     @id @default(autoincrement())
  employeeId Int     @unique
  position   String? @db.VarChar(191)

  employee Employee @relation(fields: [employeeId], references: [id])
}

model CateringRequest {
  id              String   @id @default(uuid())
  eventType       String
  eventDate       DateTime
  guestCount      Int
  contactName     String
  contactEmail    String
  menuItems       Json // { pizza: 10, pasta: 5, etc }
  specialRequests String?
  status          String   @default("PENDING")
  createdAt       DateTime @default(now())
}
