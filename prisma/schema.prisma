generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql" // or postgresql
  url      = env("DATABASE_URL")
}

//
// ENUMS
//
enum Role {
  ADMIN
  MANAGER
  STORE_KEEP
  CHEF
  WAITER
  DELIVERY_PERSON
  KITCHEN_HELPER
  CUSTOMER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PREPARING
  READY_FOR_PICKUP
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
  REFUNDED
}

enum OrderType {
  DINE_IN
  DELIVERY
  TAKEAWAY
}

enum LeaveStatus {
  ACTIVE
  ON_LEAVE
}

enum MeasurementUnit {
  KG
  G
  L
  ML
  PIECE
}

enum AlertSeverity {
  LOW
  EXPIRING
  OUT
  CRITICAL
}

enum PaymentMethod {
  CASH
  CARD
  ONLINE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

//
// MODELS
//
model User {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  address   String?
  contact   String?
  role      Role     @default(CUSTOMER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee       Employee? // 1-to-1 if user is employee
  orders         Order[]
  ratings        Rating[]
  recipes        Recipe[]
  recipeComments RecipeComment[]
}

model Employee {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [userId], references: [id])
  userId      String      @unique
  salary      Float
  leaveStatus LeaveStatus @default(ACTIVE)
  joinedAt    DateTime    @default(now())
  isActive    Boolean     @default(true)

  // Relationships
  shifts          Shift[]
  preparedOrders  Order[]    @relation("OrderPreparedBy")
  deliveredOrders Order[]    @relation("OrderDeliveredBy")
  deliveries      Delivery[]
}

model Shift {
  id           String   @id @default(cuid())
  start        DateTime
  end          DateTime
  breakMinutes Int      @default(30)

  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  foodItems FoodItem[]
}

model FoodItem {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category   Category    @relation(fields: [categoryId], references: [id])
  categoryId String
  recipe     Recipe?     // optional recipe
  orderItems OrderItem[]
  ratings    Rating[]
  customizations Customization[]
}

model Customization {
  id         String    @id @default(cuid())
  name       String
  price      Float
  foodItem   FoodItem  @relation(fields: [foodItemId], references: [id])
  foodItemId String
}

model Order {
  id              String      @id @default(cuid())
  total           Float
  status          OrderStatus @default(PENDING)
  type            OrderType
  notes           String?
  address         String
  phone           String
  tableNumber     String?
  deliveryAddress String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  user          User      @relation(fields: [userId], references: [id])
  userId        String
  preparedBy    Employee? @relation(name: "OrderPreparedBy", fields: [preparedById], references: [id])
  preparedById  String?
  deliveredBy   Employee? @relation(name: "OrderDeliveredBy", fields: [deliveredById], references: [id])
  deliveredById String?

  items    OrderItem[]
  payments Payment[]
  delivery Delivery?
}

model OrderItem {
  id           String  @id @default(cuid())
  quantity     Int
  price        Float
  specialNotes String?
  customizations Json?

  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  method        PaymentMethod
  status        String
  transactionId String?
  createdAt     DateTime @default(now())

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String
}

model Delivery {
  id        String    @id @default(cuid())
  startTime DateTime
  endTime   DateTime?
  status    String    @default("pending")

  order      Order    @relation(fields: [orderId], references: [id])
  orderId    String   @unique
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String
}

model Ingredient {
  id               String          @id @default(cuid())
  name             String          @unique
  stock            Float           @default(0)
  unit             MeasurementUnit
  expiryDate       DateTime?
  restockThreshold Float           @default(5)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt

  supplier          Supplier?          @relation(fields: [supplierId], references: [id])
  supplierId        String?
  inventoryAlerts   InventoryAlert[]
  recipeIngredients RecipeIngredient[]
}

model Supplier {
  id        String   @id @default(cuid())
  name      String
  contact   String
  email     String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ingredients Ingredient[]
}

model Recipe {
  id          String   @id @default(cuid())
  name        String
  description String
  steps       String   @db.Text
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  foodItem    FoodItem           @relation(fields: [foodItemId], references: [id])
  foodItemId  String             @unique
  author      User               @relation(fields: [authorId], references: [id])
  authorId    String
  ingredients RecipeIngredient[]
  comments    RecipeComment[]
}

model RecipeIngredient {
  id         String     @id @default(cuid())
  quantity   Float
  unit       MeasurementUnit

  recipe        Recipe     @relation(fields: [recipeId], references: [id])
  recipeId      String
  ingredient    Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId  String
}

model RecipeComment {
  id        String   @id @default(cuid())
  content   String   @db.Text
  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
}

model Rating {
  id        String   @id @default(cuid())
  stars     Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id])
  userId     String
  foodItem   FoodItem @relation(fields: [foodItemId], references: [id])
  foodItemId String
}

model InventoryAlert {
  id         String        @id @default(cuid())
  message    String
  severity   AlertSeverity
  resolved   Boolean       @default(false)
  resolvedAt DateTime?
  createdAt  DateTime      @default(now())

  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String
}

model NewsletterSubscription {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
}

model AuditLog {
  id         String   @id @default(cuid())
  action     String
  entityType String
  entityId   String
  userId     String?
  oldData    Json?
  newData    Json?
  createdAt  DateTime @default(now())
}


